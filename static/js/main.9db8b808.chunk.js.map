{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["socket","io","connect","Carta","valor","Grid","item","xs","Paper","style","width","height","padding","background","Ficha","jugador","Typography","variant","component","align","nombre","src","alt","display","margin","container","spacing","justify","alignContent","cartas","map","carta","i","key","total","Estilos","paper","maxWidth","App","useEffect","a","console","log","window","location","hostname","useState","cantidadOn","setcantidadOn","conectado","setconectado","setnombre","jugadores","setjugadores","croupier","setcroupier","turno","setturno","turnoColor","setturnoColor","tiempoReset","settiempoReset","juguemos","setjuguemos","mensaje","setmensaje","mensajes","setmensajes","messagesEndRef","useRef","current","scrollIntoView","behavior","on","data","msjs","ii","intervalo","setInterval","clearInterval","DaleIntervalo","actualizarDatos","alert","jugadoresMesa","accionTurno","e","emit","accion","target","name","className","minHeight","justifyContent","alignItems","flexWrap","direction","sm","md","lg","TextField","disabled","onChange","value","label","required","marginBottom","Button","onClick","codigo","color","maxHeight","overflowY","elevation","msj","border","onKeyPress","ref","hidden","borderRadius","pierde","gana","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9db8b808.chunk.js","sourcesContent":["import React,{useEffect, useRef, useState} from 'react';\nimport io from 'socket.io-client';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\n\nconst socket = io.connect('https://blackjack0.herokuapp.com/');\n \nfunction App() {\n  useEffect(async ()=>{\n    console.log(window.location.hostname)\n  },[])\n\n  const [cantidadOn, setcantidadOn] = useState(0);\n  const [conectado, setconectado] = useState(false);\n  const [nombre, setnombre] = useState(\"Sin nombre\");\n  const [jugadores, setjugadores] = useState([]);\n  const [croupier, setcroupier] = useState();\n  const [turno, setturno] = useState(false);\n  const [turnoColor, setturnoColor] = useState(0);\n  const [tiempoReset, settiempoReset] = useState(5);\n  const [juguemos, setjuguemos] = useState(false);\n  const [mensaje, setmensaje] = useState(\"\");\n  const [mensajes, setmensajes] = useState([]);\n\n  //Para que se muestren los ultimos mensajes\n  const messagesEndRef = useRef(null)\n  const scrollToBottom = () => {\n    messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" })\n  }\n  useEffect(scrollToBottom, [mensajes]);\n  //\n\n function DaleIntervalo(){\n  let ii = 4;\n  let intervalo = setInterval(()=>{\n    if(ii===0){\n      clearInterval(intervalo);\n      settiempoReset(5);\n      console.log(\"se paro\")\n    }else{\n      console.log(ii);\n      settiempoReset(ii);\n      ii--;\n    }\n  },1000)\n }\n  useEffect(() => { \n    socket.on('actualizarMensajes', (data) => {\n      setmensajes(msjs=>[...msjs, data]) \n    })\n    socket.on('setTiempo', () => {\n      DaleIntervalo()  \n    })\n    socket.on('colorTurno', (data) => {\n      setturnoColor(data)\n    })\n    socket.on('actualizaCantidaOn', (data) => {\n      actualizarDatos(data);\n      setjuguemos(data.juguemos)\n    })\n    //Obtiene la cantidad de usuarios conectados en la mesa\n    socket.on('entrarMesa', function(data) {\n      if(data.mensaje === 1){\n        actualizarDatos(data);\n      }else{\n        alert(\"No entraste a la mesa debido a que esta llena\")\n      }\n    })\n\n    socket.on('jugar', (data) => {\n      setjugadores(data.jugadoresMesa);\n      setcroupier(data.croupier);\n      setjuguemos(data.juguemos);\n      \n    })\n\n    socket.on('darTurno',() =>{\n      setturno(true);\n    })\n  },[])\n  \n  const actualizarDatos = (data) => {\n    setcantidadOn(data.cantidadOn);\n    setjugadores(data.jugadoresMesa);\n    setcroupier(data.croupier);\n  }\n\n  const entrarMesa = () =>{\n    setconectado(true);\n\n    socket.emit('entrarMesa',{\n      codigo: 1,\n      nombre: nombre\n    });\n\n  }\n  const salirMesa = () =>{\n    setconectado(false);\n    socket.emit('entrarMesa',{\n      codigo: 0,\n      nombre: nombre\n    });    \n  }\n\n  const jugar = () => {\n    socket.emit('jugar');\n  }\n  const cambiaNombre = (e) => {\n    setnombre(e.target.value);\n  }\n  const cambiaMensaje = (e) => {\n    setmensaje(e.target.value);\n  }\n  const Crp = () => {\n    if(croupier){\n      return <Carta jugador={croupier}/>\n    }\n  }\n\n  const accionTurno = (e) => {\n    setturno(false);\n    socket.emit('accionTurno', {accion: e.target.name});\n  }\n\n  const enviarMensaje = (e) => {\n    if(mensaje!==\"\"){\n      socket.emit('enviarMensaje', {mensaje: mensaje, nombre: nombre});\n      setmensaje(\"\")\n    }\n  }\n\n  return (\n    <div className=\"App\" style={{background:\"#34495E\"}}>\n      <Paper style={{height: \"auto\", minHeight:\"100vh\",background:\"#34495E\",margin:\"auto\",display:\"flex\",justifyContent: 'center',alignItems: 'center',flexWrap: 'wrap',padding: 10}}>\n        <Grid direction=\"row\" container justify=\"center\" spacing={1}>\n          <Grid item xs={12} sm={12} md={4} lg={4}>\n            <Typography variant=\"h4\" component=\"h1\" align=\"left\">\n              BlackJack\n            </Typography>\n            <Typography variant=\"h5\" component=\"h3\" align=\"left\">\n              {`Usuarios conectados: ${cantidadOn}`}\n            </Typography>     \n          \n            <TextField disabled={conectado} onChange={cambiaNombre} value={nombre} label=\"Nombre de usuario\" variant=\"filled\" required style={{marginBottom:\"10px\"}}/>\n            <br></br>\n            <Button disabled={cantidadOn>4 || conectado} onClick={entrarMesa} variant=\"contained\" color=\"primary\" style={{marginBottom:\"10px\"}}>Entrar a la mesa</Button>\n            <Button disabled={!conectado} onClick={salirMesa} variant=\"contained\" color=\"primary\" style={{marginBottom:\"10px\"}}>Salir de la mesa</Button>\n          \n            <Paper style={{maxHeight:\"300px\", overflowY:\"scroll\"}} elevation={2}>\n              {\n                mensajes.map(msj=>(\n                  <div style={{width:\"100%\",background:\"#415364\",border:\"1px solid gray\"}}>\n                    <Typography variant=\"h6\" component=\"h4\" align=\"left\">\n                      {msj.nombre}\n                    </Typography>\n                    <Typography align=\"left\">\n                      {msj.mensaje}\n                    </Typography>\n                  </div>\n                ))\n              }\n              <TextField onChange={cambiaMensaje} onKeyPress={(e)=>{\n                if(e.key==='Enter'){\n                  enviarMensaje()\n                }\n              }} style={{width:\"100%\"}} value={mensaje} label=\"Escribe un mensaje\" variant=\"filled\"/>\n              <div ref={messagesEndRef} />\n            </Paper>\n            <br/>\n            <button hidden={juguemos} onClick={jugar}>Juguemos</button>\n          </Grid>\n\n          <Grid item xs={12} sm={12} md={8} lg={8}>\n            <div style={{...Estilos.paper,background:\"#6969693a\",border:\"solid thin black\",borderRadius:\"15px\", margin:\"auto\"}}>\n              {\n                croupier &&\n                <Ficha jugador={croupier}/>\n              }  \n            </div>\n          <br/>\n          {\n            tiempoReset!==5 && <h3>La partida comienza en {tiempoReset}</h3>\n          }\n          <Grid direction=\"row\" container justify=\"center\" spacing={2}>\n          {\n            jugadores.map((jugador, i) => (\n              <Grid item xs={12} sm={6} md={4} lg={4}>\n                <div style={{...Estilos.paper, background: !jugador.pierde?jugador.gana?\"lightgreen\":\"#6969693a\":\"red\",border:\"solid thin black\",borderRadius:\"15px\", margin:\"auto\"}} elevation={2}>\n                  {\n                    turnoColor===i && \n                    <Typography variant=\"h6\" component=\"h3\" align=\"center\">\n                      Jugador en turno\n                    </Typography>\n                  }\n                  \n                  <Typography variant=\"h4\" component=\"h3\" align=\"center\">\n                    {jugador.nombre}\n                  </Typography>\n                  {\n                    jugador.gana === true &&\n                    <Typography variant=\"h5\" component=\"h3\" align=\"center\">\n                      ¡Felicidades ganaste!\n                    </Typography>\n                  }\n                  <img src=\"i3.png\" alt=\"jgdr\" width=\"70\" height=\"95\" style={{display:\"block\", margin: \"auto\"}} ></img>\n                  <Grid container spacing={0} justify=\"center\" alignContent=\"center\">\n                    {\n                      jugador.cartas.map((carta, i) => (\n                        <Grid key={i} item xs={3}>\n                          <Paper style={{width:35, height:60, padding:5 ,background:\"lightgray\"}}>\n                            <h3>{carta[0]+\"\"+carta[1]}</h3>\n                          </Paper>\n                        </Grid>\n                      ))\n                    }\n                  </Grid>\n                  {jugador.total!==0 && <Typography>{\"Total: \"+jugador.total}</Typography>}\n                  {\n                    jugador.nombre === nombre &&\n                    <div hidden={!turno}>\n                      <button name=\"pedir\" onClick={accionTurno}>Pedir</button>\n                      <button name=\"pasar\" onClick={accionTurno}>Pasar</button>\n                      <button name=\"doblar\" onClick={accionTurno}>Doblar</button>\n                    </div>\n                  }\n                </div>\n              </Grid> \n            ))\n          }\n            </Grid>\n          </Grid>\n        </Grid>\n      </Paper>\n    </div>\n  );\n}\n\nfunction Carta({valor}){\n  return(\n    <Grid item xs={3}>\n      <Paper style={{width:35, height:60, padding:5 ,background:\"lightgray\"}}>\n        <h3>{valor[0]+\"\"+valor[1]}</h3>\n      </Paper>\n    </Grid>\n  )\n}\n\nfunction Ficha({jugador}) {\n  return (\n    <div>\n      <Typography variant=\"h4\" component=\"h3\" align=\"center\">\n        {jugador.nombre}\n      </Typography>\n      <img src=\"i1.png\" alt=\"crpr\" width=\"82\" height=\"122\" style={{display:\"block\", margin: \"auto\"}} ></img>\n      <Grid container spacing={0} justify=\"center\" alignContent=\"center\">\n        {\n          jugador.cartas.map((carta, i) => (\n            <Carta key={i} valor={carta}/>\n          ))\n        }\n      </Grid>\n      {jugador.total!==0 && <Typography>{\"Total: \"+jugador.total}</Typography>}\n    </div>\n  )\n}\n\nconst Estilos = {\n  paper:{\n    maxWidth:280,\n    margin: \"auto\",\n    padding: 10,\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}